Module->onConstruction() {
	if (module.connectTo1) {
		connector->join(module.connectTo1, true, true);
	}
}


function join(connectTo, bUpdateTransform, bUpdateOther) {
	if (connectTo) {
		if (this.OtherConnector !== connectTo) {
		
		
			if (bUpdateOther) {
				connectTo.join(self, false, false);
				//connectTo.OtherConnector = this:
			}
			if (bUpdateTransform) {
				//Attach to ?? (core?? Actor Module)
				// Attach to module 1 step closer to core. Like a three structure
			}
		}
	}
}



Notes:
Updates all modules though all connectors (flood fill)


Core is the parent module that all other modules are attached to. Then de attach when not connected
(Cons: On detach all modules won't be attached to anything. Have to flood fill and atttach all from detach point)
OR
Use three branch structure with core being the base and then have children with children 
(Cons: A module can have multiple routes to the core)



Ideas:
- Armor block can't have turrets attach to it. Which makes turrets the vulnerable part of the ship. More turrets means more vulnerability



var p1={
	x: 0,
	y: 0
};

var p2={
	x: -1,
	y: 0
};

var p3={
	x: 1,
	y: 0	
};

var p12 = Math.sqrt(Math.pow((p1.x - p2.x),2) + Math.pow((p1.y - p2.y),2));
var p13 = Math.sqrt(Math.pow((p1.x - p3.x),2) + Math.pow((p1.y - p3.y),2));
var p23 = Math.sqrt(Math.pow((p2.x - p3.x),2) + Math.pow((p2.y - p3.y),2));

//angle in radians
var resultRadian = Math.acos(((Math.pow(p12, 2)) + (Math.pow(p13, 2)) - (Math.pow(p23, 2))) / (2 * p12 * p13));

//angle in degrees
var resultDegree = Math.acos(((Math.pow(p12, 2)) + (Math.pow(p13, 2)) - (Math.pow(p23, 2))) / (2 * p12 * p13)) * 180 / Math.PI;




Simple mechanics, complex interactions between mechanics